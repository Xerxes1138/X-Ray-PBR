#include "common.h"

uniform sampler2D s_SSR_Raycast;
uniform sampler2D s_currentColor, s_currentColor2;
uniform sampler2D s_previousColor;
uniform sampler2D s_reflectionColor;

static const float2 offset2x2[4] =
{
	float2(0, 0),
	float2(1, -1),
	float2(-1, -1),
	float2(0, 1)
};

static const float2 offset3x3[9] =
{
	float2(-1, -1),
	float2(-1, 0),
	float2(-1, 1),
	float2(0, -1),
	float2(0, 0),
	float2(0, 1),
	float2(1, -1),
	float2(1, 0),
	float2(1, 1)
};

float RayAttenBorder (float2 pos, float value)
{
	float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	return saturate(borderDist > value ? 1.0 : borderDist / value);
}

struct CombineVertexInput      
{
	float2 tc0	: TEXCOORD0;
};

float4 main(CombineVertexInput Input) : COLOR
{
	// COORD
	float2 uv = Input.tc0;
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//

	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked = data.occlusion;
	ambientOcclusionBaked = 1.0f;
				
	float materialID = DecodeShadingModel(data.materialID);
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z;
		
	float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	//
	float3 positionWorld = mul(dx_matrix_CameraToWorld, float4(positionView, 1.0f));
	float3 normalWorld = normalize(mul((float3x3)dx_matrix_CameraToWorld, normalView));
	
	//float roughness = pow(1.0f - smoothness * 0.7f, 6.0f);
	float roughness = max(1.0f - smoothness, 0.01f);
	
	float3 cameraPositionWorld = eye_position;
		
	float3 viewDirectionWorld = normalize(positionWorld - cameraPositionWorld);
	//

	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * STALKER_SCREEN_SIZE.xy / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
		
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

    float4 currentColor = tex2D(s_currentColor, uv);

	// FOG
	float fogHeight = ComputeHeightFog(positionWorld, eye_position, dx_WeatherParams.x);
	
	#if 0
		float fog = saturate(ComputeLegacyFog(positionView) * fogHeight);
	#else
		float fog = saturate(ComputeExponentialFog(positionView) * fogHeight);
	#endif
	
    #ifndef STALKER_DEBUG_COMBINE_PASS
		float3 atmosphericScattering = fog_color;
		ComputeFogLighting(atmosphericScattering, viewDirectionWorld, dx_SkyColor);
			
		#ifdef STALKER_FOG_SUN
			float sunFactor = saturate(dot(normalize(positionView), -Ldynamic_dir.xyz));
			atmosphericScattering += Ldynamic_color.rgb * pow(sunFactor, 8.0);
			//atmosphericScattering = lerp(atmosphericScattering, Ldynamic_color.rgb, pow(sunFactor,8.0));
		#endif

		currentColor.rgb = lerp(currentColor.rgb, atmosphericScattering, fog);
		currentColor.a = fog;
	#else
		currentColor.a = 0.0f;
    #endif
		
 	return currentColor;
}