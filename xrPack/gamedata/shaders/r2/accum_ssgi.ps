#include "common.h"

#include "shared\common.h"
#include "shared\stalker_Core.h"
#include "shared\stalker_Utils.h"

#include "lmodel.h"
#include "hmodel.h"

static const float2 offset[4] =
{
	float2(0, 0),
	float2(2, -2),
	float2(-2, -2),
	float2(0, 2)
};

float RayAttenBorder (float2 pos, float value)
{
	float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	return saturate(borderDist > value ? 1.0 : borderDist / value);
}

#ifdef STALKER_CHECKERBOARD_RENDERING
float4  main  (AccumVertexOuput I) : COLOR
#else
	void main 
	( 
		AccumVertexOuput I,
		out float4 outIndirectDiffuse : COLOR0,
		out float4 outIndirectSpecular : COLOR1
	)
#endif
{
	// COORD
    float2 uv = I.tc;
	uint2 pos = uv * STALKER_SCREEN_SIZE.xy;
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked = data.occlusion;
				
	float materialID = DecodeShadingModel(data.materialID);
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z;
		
	float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	//
	float3 positionWorld = mul(dx_matrix_CameraToWorld, float4(positionView, 1.0f));
	float3 normalWorld = normalize(mul((float3x3)dx_matrix_CameraToWorld, normalView));
	
	//float roughness = pow(1.0f - smoothness * 0.7f, 6.0f);
	float roughness = max(1.0f - smoothness, 0.01f);
	
	float3 cameraPositionWorld = eye_position;
		
	float3 viewDirectionWorld = normalize(positionWorld - cameraPositionWorld);
	//

	float NdotV = saturate(dot(normalWorld, -viewDirectionWorld));
	
	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * (STALKER_SCREEN_SIZE.xy) / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
	
	#ifdef STALKER_USE_TAA
		interleavedGradientNoise = fmod(interleavedGradientNoise + (GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

	float3 ssgi = 0.0f;
	
    float3 lightingPassDiffuse = tex2D(s_accumulator, uv);
	
	#if 0
		float4 ssrResolveColor = 0.0;
        float weightSum = 0.0;	
        for(int i = 0; i < 4; i++)
        {
			float2 offset = offset[i] * (1.0 / STALKER_SCREEN_SIZE);
			float2 neighborUV = uv + offset;
			
			float4 hitPacked = tex2Dlod(s_AO, float4(neighborUV, 0.0, 0.0));
			float2 hitUv = hitPacked.xy;
            int2 hitPos = hitUv * STALKER_SCREEN_SIZE.xy;
        
            float hitZ = tex2D(s_position, hitUv).z;
            if (hitZ <= 0)
                hitZ = dx_ProjectionParams.y;
        
            float hitPDF = hitPacked.z;
			float hitFail = hitPacked.w;   

            float3 hitPositionView = float3(hitZ * (hitPos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), hitZ);
        
            float3 N = normalView;
            float3 V = normalize(-positionView);
            float3 L = hitPositionView - positionView;
            float3 H = L + V;
        
            float NdotL = saturate(dot(N, L));
            float NdotV = saturate(dot(N, V));
            float NdotH = saturate(dot(N, H));
        
            float weight = NdotL * hitPDF;
			
			float4 sampledColor = 0.0f;
			sampledColor.rgb = tex2Dlod(s_accumulator, float4(hitUv, 0, 0)).rgb * RayAttenBorder(hitUv, 0.125f) * hitFail;
            sampledColor.a = /*hitFail **/ 1.0f;
			
			sampledColor /= 1 + sampledColor;
			
			ssrResolveColor += sampledColor * weight;
            weightSum += weight;
		}
		ssrResolveColor /= weightSum;
		
		ssrResolveColor /= 1 - ssrResolveColor;

		ssgi = ssrResolveColor.rgb;
	#endif
	
	outIndirectDiffuse = float4(lightingPassDiffuse.rgb /*+ ssgi.rgb*/, 0.0f);
	outIndirectSpecular = 0.0f;
}