#include "common.h"

#include "shared\common.h"
#include "shared\stalker_Core.h"
#include "shared\stalker_Utils.h"

#include "lmodel.h"
#include "hmodel.h"
#include "shadow.h"

uniform float4 dx_ScreenSize;

float3 FetchNormal( const float2 uv)
{

	const float3 c = tex2D(s_position, uv).xyz;
	const float3 r = tex2D(s_position, uv + half2( +1.0 , 0.0 ) * dx_ScreenSize.zw ).xyz;
	const float3 l = tex2D(s_position, uv + half2( -1.0 , 0.0 ) * dx_ScreenSize.zw ).xyz;
	const float3 t = tex2D(s_position, uv + half2(  0.0, +1.0 ) * dx_ScreenSize.zw ).xyz;
	const float3 b = tex2D(s_position, uv + half2(  0.0, -1.0 ) * dx_ScreenSize.zw ).xyz;
	const float3 vr = ( r - c ), vl = ( c - l ), vt = ( t - c ), vb = ( c - b );
	const float3 min_horiz = ( dot( vr, vr ) < dot( vl, vl ) ) ? vr : vl;
	const float3 min_vert = ( dot( vt, vt ) < dot( vb, vb ) ) ? vt : vb;
	const float3 normalScreenSpace = normalize( cross( min_horiz, min_vert ) );

	return float3( normalScreenSpace.x, normalScreenSpace.y, normalScreenSpace.z );
}

inline bool is_saturated(float value)   { return value == saturate(value); }
inline bool is_saturated(float2 value)  { return is_saturated(value.x) && is_saturated(value.y); }
inline bool is_saturated(float3 value)  { return is_saturated(value.x) && is_saturated(value.y) && is_saturated(value.z); }
inline bool is_saturated(float4 value)  { return is_saturated(value.x) && is_saturated(value.y) && is_saturated(value.z) && is_saturated(value.w); }


float RayAttenBorder (float2 pos, float value)
{
	float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	return saturate(borderDist > value ? 1.0 : borderDist / value);
}

struct 	v2p
{
	float4 tc0: 		TEXCOORD0;
};

void main 
( 
		v2p I,
		out float4 outSSAORaycast : COLOR0
)
{
	// COORD
	float2 uv = I.tc0;
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked =  1.0f /*data.occlusion*/;
				
	float materialID = DecodeShadingModel(data.materialID);
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z /*LinearDepth(depth)*/;
		
	float3 positionView = gBuffer0.xyz /*float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth)*/;

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	//
	float3 positionWorld = mul(dx_matrix_CameraToWorld, float4(positionView, 1.0f));
	float3 normalWorld = normalize(mul((float3x3)dx_matrix_CameraToWorld, normalView));
	
	//float roughness = pow(1.0f - smoothness * 0.7f, 6.0f);
	float roughness = max(1.0f - smoothness, 0.01f);
	
	float3 cameraPositionWorld = eye_position;
		
	float3 viewDirectionWorld = normalize(positionWorld - cameraPositionWorld);
	//

	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * (dx_ScreenSize.xy) / 1024);
	
	#ifdef STALKER_STOCHASTIC_SSAO_TEMPORAL
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(uv * (dx_ScreenSize.xy));
	
	#ifdef STALKER_STOCHASTIC_SSAO_TEMPORAL
		interleavedGradientNoise = fmod(interleavedGradientNoise + (GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	
	const float2 blueNoiseRand[4] = {blueNoise.xy , blueNoise.zw , float2(-blueNoise.y, blueNoise.x) , float2(-blueNoise.w, blueNoise.z)};
	//
	
	float heightMapAO = 1.0f;
	
	#ifdef STALKER_HEIGHT_MAP_SSAO
		float fadeEnd = STALKER_RAIN_FADE_DISTANCE;
		float fadeStart = 45;
		float fade = saturate((fadeEnd - length(positionView)) / (fadeEnd - fadeStart));

		float4 P4 = float4(positionView.xyz + normalView * data.occlusion * 0.5f, 1.f);
		float4 PS = mul(m_shadow, P4);
				
		const float scale = (100.0f / float(SMAP_size));
		
		const int heightMapAONum = 4; 
				
		float heightMapAOSampled = 0.0f;
		float heightMapAOSum = 0.0f;
		for (int k = 0; k < heightMapAONum; k++)
		{
			float dist = sqrt(blueNoiseRand[k].y); // Uniform
					
			if (0)
				dist = sqrt(-2.0f * log(blueNoiseRand[k].y)); // Gaussian
							
			float s, c;
			float a = blueNoiseRand[k].x;
			sincos(a * STALKER_TWO_PI, s, c);
			float2 rot = float2(c, s);

			float2 offset = rot * dist * scale;

			float weight = 1.0f; // box

			heightMapAOSampled += tex2Dproj(s_smap, float4(PS.xy + PS.w * offset, PS.zw)).x * weight;
			heightMapAOSum += weight;
		}
		heightMapAOSampled = heightMapAOSampled / heightMapAOSum;
				
		heightMapAO	= lerp(heightMapAOSampled, 1.0f, 1.0f - fade);
	#endif	
			
	// CRYTEK SSAO
	#ifdef STALKER_CRYTEK_SSAO
		float2 screenTC = uv;
			
		float offsetScale = STALKER_CRYTEK_SSAO_SIZE;
		
		offsetScale = offsetScale * saturate(linearDepth / 3.5f) * (1.0f + linearDepth / 2.0f ); // Large at distance and small at close range
		offsetScale *= 1.0f / linearDepth;
		
		float3 vRotation = float3(rotation, interleavedGradientNoise /*blueNoise.z*/);

		float fSceneDepthP = linearDepth;

		const float offsetScaleStep = 1 + 2.4 / STALKER_CRYTEK_SSAO_NUM_SAMPLES;
		float3 vSamplePos = float3(0,0,0);
		float Accessibility = 0;
		for ( int ao=0; ao <( STALKER_CRYTEK_SSAO_NUM_SAMPLES / 8); ao++ )
		for ( int x= -1; x<=1; x+=2)
		for ( int y= -1; y<=1; y+=2)
		for ( int z= -1; z<=1; z+=2)
		{
			
			float3 vOffset = normalize( float3( x, y ,z )) * (offsetScale *= offsetScaleStep);
			float3 vRotatedOffset = reflect(vOffset, vRotation);

			vSamplePos = float3( screenTC.x, screenTC.y, fSceneDepthP );
				
			vSamplePos += float3( vRotatedOffset.xy, vRotatedOffset.z * fSceneDepthP * 2);

			float fSceneDepthS = tex2Dlod(s_position, float4(vSamplePos.xy, 0, 0)).z;

			float fRangeIsInvalid = saturate(((fSceneDepthP - fSceneDepthS) / fSceneDepthP));
				
			float occlusion = fSceneDepthS > vSamplePos.z;
				
			Accessibility += lerp(occlusion, 0.5f, fRangeIsInvalid);
		}
		Accessibility = Accessibility / STALKER_CRYTEK_SSAO_NUM_SAMPLES;

		outSSAORaycast.xyz = saturate(heightMapAO);
		outSSAORaycast.w = saturate(Accessibility * Accessibility + Accessibility * 2.0f);
	#else
		float rayLength = STALKER_STOCHASTIC_SSAO_LENGTH;
		
		const uint NUM_RAY_MARCH_SAMPLES = 20;
		
		const float SIZE_RAY_MARCH_STEPS = (rayLength / ((float)NUM_RAY_MARCH_SAMPLES));
		
		float reflectionRayMarchStep = SIZE_RAY_MARCH_STEPS;
		reflectionRayMarchStep = reflectionRayMarchStep * blueNoise.x + reflectionRayMarchStep;
			
		float3 L = /*-Ldynamic_dir.xyz +*/ normalView;
		
		float2 Xi = blueNoiseRand[0].xy;
	
		float4 samplePoint = float4(hemisphereSample_cos(Xi.x, Xi.y), 1.0f);

		float4 H = TangentToWorld(L, samplePoint);
			
		float2 rayUV = 0.0f;
		float3 rayPosition = positionView;	
		float3 rayDirection = H.xyz;
		
		uint hitFail = 0; 
		
		[unroll (NUM_RAY_MARCH_SAMPLES)]
		for (uint rayStepIdx = 0; rayStepIdx < NUM_RAY_MARCH_SAMPLES; rayStepIdx++)
		{
			rayPosition += rayDirection * reflectionRayMarchStep;
			
			float4 screenSpaceReflectionPoint = mul(dx_matrix_Projection, float4(rayPosition, 1.0f));
			screenSpaceReflectionPoint /= screenSpaceReflectionPoint.w;
			screenSpaceReflectionPoint.xy = screenSpaceReflectionPoint.xy * float2(0.5, -0.5) + float2(0.5, 0.5);
			
			rayUV = screenSpaceReflectionPoint.xy;
			
			if (is_saturated(rayUV))
			{
				float ZBufferVal = /*LinearDepth*/(tex2Dlod(s_position, float4(rayUV.xy,0,0)).z);
					if(ZBufferVal <= 0 ) ZBufferVal = dx_Viewport_Params.y;
					
				float delta = rayPosition.z - ZBufferVal;

				float thickness = STALKER_STOCHASTIC_SSAO_THICKNESS;

				if (abs(thickness - delta) < thickness)
				{
					hitFail = 1;
					break;
				}
			}
			reflectionRayMarchStep *= 1.0f + SIZE_RAY_MARCH_STEPS; // Increase step size after each iteration
		}

		outSSAORaycast.xyz = saturate(heightMapAO);
		outSSAORaycast.w = (1.0f - saturate((float)hitFail));
    #endif
}