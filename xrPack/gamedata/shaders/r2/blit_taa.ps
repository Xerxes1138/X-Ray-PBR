// Based on PlayDead's Temporal Reprojection Anti-Aliasing - https://github.com/playdeadgames/temporal
 
#include "common.h"
#include "hmodel.h"

uniform sampler2D s_currentColor;
uniform sampler2D s_previousColor;

uniform float4 dx_TAA_Jitter;

float4 clip_aabb(float3 aabb_min, float3 aabb_max, float4 p, float4 q)
{

		float4 r = q - p;
		float3 rmax = aabb_max - p.xyz;
		float3 rmin = aabb_min - p.xyz;

		const float eps = 0.00000001f;

		if (r.x > rmax.x + eps)
			r *= (rmax.x / r.x);
		if (r.y > rmax.y + eps)
			r *= (rmax.y / r.y);
		if (r.z > rmax.z + eps)
			r *= (rmax.z / r.z);

		if (r.x < rmin.x - eps)
			r *= (rmin.x / r.x);
		if (r.y < rmin.y - eps)
			r *= (rmin.y / r.y);
		if (r.z < rmin.z - eps)
			r *= (rmin.z / r.z);

		return p + r;
}

struct TAAVertexOuput
{
	//float4 hpos	: POSITION;
	float4 tc0 : TEXCOORD0;
};

void main 
( 
	TAAVertexOuput I,
	out float4 outToBuffer : COLOR0,
	out float4 outToScreen : COLOR1
)
{
	// COORD
	float2 uv = I.tc0;

	//uv -= (dx_TAA_Jitter.xy) / STALKER_SCREEN_SIZE;
	
	float2 uvPrevious = I.tc0;
	
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked =  1.0f /*data.occlusion*/;
				
	float materialID = data.materialID;
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z;
		
	float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	// RANDOM
	float dither = Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * (STALKER_SCREEN_SIZE.xy) / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
		
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

	float2 velocity = tex2D(s_motionVector, uv);

	float4 colorTemporal = tex2D(s_currentColor, uv);

	#ifdef STALKER_USE_MBLUR
		const float2 v = 0.5f * velocity * STALKER_MBLUR_SCALE;
		const int taps = 3;// on either side!

		float2 vtap = v / taps;
		float2 pos0 = uv + vtap * rotation;
		
		float4 accu = 0.0;
		float wsum = 0.0;
		for (int i = -taps; i <= taps; i++)
		{
			float w = 1.0f; // box
		    //float w = taps - abs(i) + 1; // triangle
			//float w = 1.0 / (1 + abs(i)); // pointy triangle
			
			float sampledDepth = tex2Dlod(s_position, float4( pos0 + i * vtap, 0.0f, 0.0f)).z;

			float4 sampledColor = tex2Dlod(s_currentColor, float4( pos0 + i * vtap, 0.0f, 0.0f));
			
			accu += w * sampledColor;
			wsum += w;
		}
		accu = accu / wsum;

		float vel_mag = length(velocity * dx_ScreenParams.xy);
		const float vel_trust_full = 2.0f;
		const float vel_trust_none = 15.0f;
		const float vel_trust_span = vel_trust_none - vel_trust_full;
		float trust = 1.0f - clamp(vel_mag - vel_trust_full, 0.0f, vel_trust_span) / vel_trust_span;

		float4 toScreen = lerp(accu, colorTemporal, trust);
	#else
		float4 toScreen = colorTemporal;
	#endif
	
    outToBuffer = max(1e-5f, float4(toScreen.rgb, 1.0f));
}