#include "common.h"

#include "shared\common.h"
#include "shared\stalker_Core.h"
#include "shared\stalker_Utils.h"

#define USE_DISTORT	//- shader defined
#define	EPSDEPTH 1e-5f

uniform sampler2D s_currentColor;
uniform sampler2D s_distort;
uniform sampler2D s_accumulator_ssgi;

uniform sampler2D s_SSR_Raycast, s_reflectionColor;

struct TonemapVertexInput      
{
	float2 tc0	: TEXCOORD0;
};

float4 	main( TonemapVertexInput I ) : COLOR
{
	// COORD
	float2 uv = I.tc0;
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked =  1.0f /*data.occlusion*/;
				
	float materialID = DecodeShadingModel(data.materialID);
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z;
		
	float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//
	
	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * STALKER_SCREEN_SIZE.xy / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
		
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

    float3 currentColor = tex2D(s_currentColor, uv);

    #ifdef USE_DISTORT
	    float4 distort = tex2D(s_distort, uv);

	    float2 offset = (distort.xy - 0.5f) * def_distort;

	    //float depth_x = tex2D(s_position, uv + offset).z;

	    float3 refractedColor = tex2D(s_currentColor, uv + offset);
 
        // This should be done inside the particle itself, it should be depthFromBehindTransparentObject < depthOfTransparentObject
        /*if((depth_x + EPSDEPTH) < depth)
            refractedColor = tex2D(s_currentColor, uv);*/

        currentColor = refractedColor;
     #endif

    float4 bloom1 = tex2D(s_bloom, uv + float2(-2,-2) * STALKER_SCREEN_SIZE.zw);
    float4 bloom2 = tex2D(s_bloom, uv + float2(2,-2) * STALKER_SCREEN_SIZE.zw);
	float4 bloom3 = tex2D(s_bloom, uv + float2(-2,2) * STALKER_SCREEN_SIZE.zw);
	float4 bloom4 = tex2D(s_bloom, uv + float2(2,2) * STALKER_SCREEN_SIZE.zw);
	
	float4 bloom = (bloom1 + bloom2 + bloom3 + bloom4) / 4.0f;
		
    //currentColor += max(1e-5f, bloom.rgb);

	// TONE-MAPPING CURVE
	#ifndef STALKER_DEBUG_COMBINE_PASS
		#ifdef STALKER_USE_TONEMAP
			#ifdef STALKER_TONEMAP_HABLE 
				//Hable Curve
				const float A = 0.15f;
				const float B = 0.50f;
				const float C = 0.10f;
				const float D = 0.20f;
				const float E = 0.02f;
				const float F = 0.30f;
				const float W = 11.2f;
							
				float3 x = STALKER_TONEMAP_BIAS * currentColor;
				float3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
							
				x = W;
				float3 whiteScale = 1.0f / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);
				
				currentColor = curr * whiteScale;
			#else
				currentColor = ACESFitted(currentColor * STALKER_TONEMAP_BIAS);
			#endif
		#endif
	#endif
	//
	
	// sRGB
	currentColor = accurateLinearToSRGB(currentColor);

    // LUT
    // LUT code should be here
    //
	
	// DEBUG
	#ifdef STALKER_DEBUG_PBR_ALBEDO
		float luminance = dot(albedo, float3(0.2126f, 0.7152f, 0.0722f));

		float toCheck = luminance /*smoothness*/;
		
		float minRange = 0.012983032342173f /*0.0318960330730115f*/;
		float maxRange = 0.896269353374266f;
		
		albedo = accurateLinearToSRGB(albedo);
		
		if(toCheck >= minRange && toCheck <= maxRange)
		{
			currentColor.rgb = uv.x < STALKER_DEBUG_DIVIDER ? float3(0,1,0) : albedo;
		}
		else
		{
			currentColor.rgb = uv.x < STALKER_DEBUG_DIVIDER ? float3(1,0,0) : albedo;
		}
	#endif

	#ifdef STALKER_DEBUG_MATERIAL_ID
		if(materialID == SHADING_MODEL_STANDARD)
		{
			currentColor.rgb = float3(1,0,0);
		}
		else if(materialID == SHADING_MODEL_CLOTH)
		{
			currentColor.rgb = float3(0,1,0);
		}
			else if(materialID == SHADING_MODEL_SSS)
		{
			currentColor.rgb = float3(0,0,1);
		}
		else if(materialID == SHADING_MODEL_FOLIAGE)
		{
			currentColor.rgb = float3(0,1,1);
		}
	#endif
	
	//currentColor = tex2D(s_AO, uv).a;
	
	return  float4(currentColor + blueNoise.w / 255.0f, 1.0f);
}