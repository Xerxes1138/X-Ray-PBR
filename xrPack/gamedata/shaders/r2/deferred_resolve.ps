#include "common.h"
#include "lmodel.h"
#include "hmodel.h"
#include "fmodel.h"
	
struct CombineVertexInput      
{
	float4 hpos	: POSITION;
	float2 tc0	: TEXCOORD0;
	float4 ray	: TEXCOORD1;
};

float4 	main		( CombineVertexInput I )	: COLOR0
{
	// COORD
	float2 uv = I.tc0;
	int2 pos = uv * STALKER_SCREEN_SIZE;
	//

	#ifdef STALKER_CHECKERBOARD_RENDERING
		bool checkerboard = ComputeCheckerboard(pos);
	#endif
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked = data.occlusion;
				
	float materialID = DecodeShadingModel(data.materialID);
	
	float depth = data.depth;
	
	float linearDepth = LinearDepth(depth);
		
	float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	// DEFERRED LIGHTING PASS
    float4 lightingPassDiffuse = tex2D(s_accumulator, uv);
	
    float4 lightingPassSpecular = tex2D(s_accumulatorSpecular, uv);
	
	float3 diffuseLighting = lightingPassDiffuse.rgb;
	float3 specularLighting = lightingPassSpecular.rgb;
	//

	// RANDOM
	float4 blueNoise = tex2D(s_bluenoise, uv * (STALKER_SCREEN_SIZE.xy) / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	
	float interleavedGradientNoise = InterleavedGradientNoise(I.tc0 * STALKER_SCREEN_SIZE);
		
	float whiteNoise = WhiteNoise(I.tc0 * STALKER_SCREEN_SIZE);
	
	float jitter =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);

	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//

	// SSS PASS - https://github.com/Xerxes1138/ScreenSpaceSubsurfaceScattering
	#ifdef STALKER_USE_SSSSS
		float sssMask = materialID == SHADING_MODEL_SSS ? 1 : 0;
		float3 sssDiffuseDirect  = 0.0f;
		float3 sssAttenuation = 0.0f;
		float3 sssWeights = 0.0f;
		for(int w = -STALKER_SSS_NUM_SAMPLES; w <= STALKER_SSS_NUM_SAMPLES; w++)
		{
			float dist = ((float)w / STALKER_SSS_NUM_SAMPLES);
					
			float2 offset = (float2)(dist * (STALKER_SSS_SIZE / linearDepth) * sssMask);
					
			offset *= rotation * sqrt(blueNoise.y);

			float2 offsetUV = I.tc0 + offset;

			sssAttenuation = SSSAtenuation(dist, albedo /*STALKER_SSS_WEIGHTS*/);
					
			float sampledLinearDepth = tex2D(s_position, offsetUV).z;    
					 
			float delta = saturate(abs(sampledLinearDepth - linearDepth));

			float3 sampledDiffuseLighting = tex2D(s_accumulator, offsetUV).rgb;

			sssWeights += sssAttenuation;
			sssDiffuseDirect += lerp(sampledDiffuseLighting, diffuseLighting, delta) * sssAttenuation;
		}
		sssDiffuseDirect /= sssWeights;
			
		diffuseLighting = sssDiffuseDirect; 
	#endif
	//
	
	float3 color = diffuseLighting * albedo + specularLighting;

	// DEBUG	
	#ifdef STALKER_DEBUG_COMBINE_PASS
		#ifdef STALKER_DEBUG_DIVIDE
			color = uv.x < STALKER_DEBUG_DIVIDER ? diffuseLighting * 1.0f + specularLighting : diffuseLighting * albedo + specularLighting;

			if(abs(uv.x - STALKER_DEBUG_DIVIDER) < 0.001f)
				color = float3(0,1,0);
		#else
			color = diffuseLighting + specularLighting;
		#endif
	#endif
	//

	return float4(color, 1.0f);
}
