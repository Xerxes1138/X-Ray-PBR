// Terrain shader
#define	USE_TDETAIL
#define	USE_4_DETAIL

#if defined(USE_TDETAIL) && defined(USE_4_DETAIL)
    #define	USE_TBUMP
	#define	USE_4_BUMP
#endif

#include "common.h"
#include "stalker_SurfaceData.h"

sampler2D s_rain_ripple;
sampler2D s_rain_puddle;

			float3 BlendSoftLight(float3 cBase, float3 cBlend)
			{
				float3 isLessOrEq = step(cBlend, 0.5);
				float3 cNew = lerp(1 - (1 - cBase) * (1 - 2 * cBlend * cBase), cBase * (1 - (1 - cBase) * (1 - 2 * cBlend)), isLessOrEq);
				return cNew;
			}

			float3 BlendScreen(float3 c1, float3 c2)
			{
				return c1 + c2 * (1.0 - c1);													                            // 2 alu
			}

			float3 BlendOverlay(float3 c1, float3 c2)
			{
				return (c1 < 0.5f) ? 2.0 * c1 * c2 : -1.0 + 2.0 * BlendScreen(c1, c2);	  // 5 alu
			}
			
void main 
( 
	VertexOutput_GBUFFER Input,
    out float4 outGBuffer0 : COLOR0,
    out float4 outGBuffer1 : COLOR1,
	out float4 outGBuffer2 : COLOR2,
	out float4 outGBuffer3 : COLOR3
)
{
	float3 positionView = Input.vs_positionView.xyz;
	
	half3 albedo = tbase(Input.vs_textureCoord).rgb;
	
	half ambientOcclusionBaked = tbase(Input.vs_textureCoord).a /* 3.0f*/;
	
	half4 lightmap = tex2D(s_lmap, Input.vs_textureCoord);

	half smoothness	= def_gloss;
	
	half microOclusion = 1.0f;

	#ifdef USE_TDETAIL
		#ifdef USE_4_DETAIL
		half4 mask = tex2D(s_mask, Input.vs_textureCoord);
		
		half mag = dot(mask, 1.0f);
		
		mask = mask / mag;
					
		half4 albedoR = tex2D(s_dt_r, Input.tcdbump) * mask.r;
		half4 albedoG = tex2D(s_dt_g, Input.tcdbump) * mask.g;
		half4 albedoB = tex2D(s_dt_b, Input.tcdbump) * mask.b;
		half4 albedoA = tex2D(s_dt_a, Input.tcdbump) * mask.a;
		
		//float4 radius = 1.0f;
		
		//float heightR = (albedoR.a + mask.r);
		//float heightG = (albedoG.a + mask.g);
		//float heightB = (albedoB.a + mask.b);
		//float heightA = (albedoA.a + mask.a);
		
		//float sum = max(heightR, max(heightG, max(heightB, heightA)));

		//float4 height = max(1e-5f, float4(heightR - sum + radius.r, heightG - sum + radius.g, heightB - sum + radius.b, heightA - sum + radius.a));
		
		float3 albedoTiled = albedoR.rgb + albedoG.rgb + albedoB.rgb + albedoA.rgb;//(height.r * albedoR + height.g * albedoG + height.b * albedoB + height.a * albedoA) / (height.r + height.g + height.b + height.a);
		
		albedo = BlendOverlay(albedo, albedoTiled);
		
		float heightSum =  albedoR.a + albedoG.a + albedoB.a + albedoA.a;//(height.r * albedoR.a + height.g * albedoG.a + height.b * albedoB.a + height.a * albedoA.a) / (height.r + height.g + height.b + height.a);
		
		#ifdef USE_4_BUMP
			half3 normalR = UnpackNormal(tex2D(s_dn_r, Input.tcdbump)) * mask.r;
			half3 normalG = UnpackNormal(tex2D(s_dn_g, Input.tcdbump)) * mask.g;
			half3 normalB = UnpackNormal(tex2D(s_dn_b, Input.tcdbump)) * mask.b;
			half3 normalA = UnpackNormal(tex2D(s_dn_a, Input.tcdbump)) * mask.a;
			
			half smoothnessR = tex2D(s_dn_r, Input.tcdbump).r * mask.r;
			half smoothnessG = tex2D(s_dn_g, Input.tcdbump).r * mask.g;
			half smoothnessB = tex2D(s_dn_b, Input.tcdbump).r * mask.b;
			half smoothnessA = tex2D(s_dn_a, Input.tcdbump).r * mask.a;
			
			half microOclusionR = tex2D(s_dn_r, Input.tcdbump).g * mask.r;
			half microOclusionG = tex2D(s_dn_g, Input.tcdbump).g * mask.g;
			half microOclusionB = tex2D(s_dn_b, Input.tcdbump).g * mask.b;
			half microOclusionA = tex2D(s_dn_a, Input.tcdbump).g * mask.a;

			half3 normal = normalR + normalG + normalB + normalA;//(height.r * normalR + height.g * normalG + height.b * normalB + height.a * normalA) / (height.r + height.g + height.b + height.a);
			 
			smoothness = smoothnessR + smoothnessG + smoothnessB + smoothnessA;//(height.r * smoothnessR + height.g * smoothnessG + height.b * smoothnessB + height.a * smoothnessA) / (height.r + height.g + height.b + height.a);
			
			microOclusion = microOclusionR + microOclusionG + microOclusionB + microOclusionA;//(height.r * microOclusionR + height.g * microOclusionG + height.b * microOclusionB + height.a * microOclusionA) / (height.r + height.g + height.b + height.a);
							
			half3 normalView = normalize(mul(half3x3(Input.vs_tangentView, Input.vs_binormalView, Input.vs_normalView), normal));
		#else
			half3 normalView = normalize(Input.N.xyz);
		#endif
		
		#else
			float3 detail = tex2D(s_detail, Input.tcdbump).rgb; 
			albedo = BlendOverlay(albedo, detail);
		#endif
	#else
		half3 normalView = normalize(Input.N.xyz);
	#endif

	half ms	= xmaterial;
	#ifdef USE_R2_STATIC_SUN
		 ms = lightmap.w;
	#endif
	
	// RAIN LAYER
	#ifdef STALKER_USE_LEGACY_RAIN
		#ifdef USE_TDETAIL
			#ifdef USE_4_DETAIL	
			

				float4 TimeMul = float4(1.0f, 0.85f, 0.93f, 1.13f); 
				float4 TimeAdd = float4(0.0f, 0.2f, 0.45f, 0.7f);
				float4 Times = (timers.x * TimeMul + TimeAdd) * 1.6f;
				Times = frac(Times);
				
				float4 Weights = dx_WeatherParams.x - float4(0, 0.25, 0.5, 0.75);
				Weights = saturate(Weights * 4);

				#ifdef USE_4_BUMP
					//half3 normalWater = normalize(mul(half3x3(Input.M1, Input.M2, Input.M3), float3(0,0,1)));
					
					half3 rippleNormal1 = ComputeRipple(s_rain_ripple, Input.vs_positionWorldAndDepth.xy + float2( 0.25f,0.0f), Times.x, Weights.x);
					half3 rippleNormal2 = ComputeRipple(s_rain_ripple, Input.vs_positionWorldAndDepth.xy + float2(-0.55f,0.3f), Times.y, Weights.y);
					half3 rippleNormal3 = ComputeRipple(s_rain_ripple, Input.vs_positionWorldAndDepth.xy + float2(0.6f, 0.85f), Times.z, Weights.z);
					half3 rippleNormal4 = ComputeRipple(s_rain_ripple, Input.vs_positionWorldAndDepth.xy + float2(0.5f,-0.75f), Times.w, Weights.w); 

					float4 Z = lerp(1.0f, float4(rippleNormal1.z, rippleNormal2.z, rippleNormal3.z, rippleNormal4.z), Weights);
					
					float3 rippleNormal = float3
					(
						Weights.x * rippleNormal1.xy +
						Weights.y * rippleNormal2.xy + 
						Weights.z * rippleNormal3.xy + 
						Weights.w * rippleNormal4.xy, Z.x * Z.y * Z.z * Z.w
					);
					rippleNormal = normalize(rippleNormal);
					
					half3 normalWater = normalize(mul(half3x3(Input.vs_tangentView, Input.vs_binormalView, Input.vs_normalView), rippleNormal));
					
				#else
					half3 normalWater = normalize(Input.N.xyz);
				#endif
				half4 smoothnessWater = 0.98f;
				half wetSource = 1.0f - tex2D(s_rain_puddle, Input.vs_positionWorldAndDepth.xy / 40);
				half wet = dx_WeatherParams.x;
				half flood = 0.0f;
				half puddle = dx_WeatherParams.x;
				
				// Get depth/accumulation water information
				float2 accumulatedWaters;
				// Get the "size" of the accumulated water in a hole/cracks
				accumulatedWaters.x = min(flood, 1.0f - height);
				// Get the size of the accumlated water in puddle taking into account the 
				// marging (0.4 constant here)
				accumulatedWaters.y = saturate((puddle - wetSource) / 0.4f);
				// Mix vertex color and height map accumulated water by taking the higher
				float  accumulatedWater = max(accumulatedWaters.x, accumulatedWaters.y);

			

				// WetLevel could be 0 but we can still require to have wet surface
				// if there is accumulated water.
				float newWetLevel = saturate(wet + accumulatedWater);
				
				float metallic = 0.0f;//saturate((dot(0.04f, 0.33f) * 1000 - 500));

				// Calculate the surface wet BRDF parameters for the new wet level
				DoWetProcess(albedo, smoothness, metallic, newWetLevel);

				smoothness = lerp(smoothness, smoothnessWater, accumulatedWater);
				normalView = lerp(normalView, normalWater, accumulatedWater);
			#endif
		#endif
	#endif
	
	float2 velocity = float2(0.5f, 0.5f);
		
	#if 0
		float4 currentClip	= mul(m_P, float4(positionView, 1.0f));
		float2 current = (currentClip.xy / currentClip.w);
		current = current * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);
		
		float3 previousPositionView = Input.vs_positionWorldAndDepth.xyz;
 
		float4 previousClip	= mul(m_previous_P, float4(previousPositionView, 1.0f));
		float2 previous =  (previousClip.xy / previousClip.w);
		previous = previous * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);

		velocity = (current - previous);
	#endif
	
	GBufferData data;
	data.position = positionView /*=+ normalView * def_virtualh / 2.0f*/;
	data.normal = normalView;
	data.diffuseColor = albedo;
	
	float3 f0 = accurateLinearToSRGB((float3)0.04f);
	data.specularColor = f0;
	
	//data.velocity = velocity;
		
    data.materialID = EncodeShadingModel(SHADING_MODEL_STANDARD);
    data.smoothness = smoothness;
    data.occlusion = heightSum /*ambientOcclusionBaked * microOclusion*/;
    data.depth = 1.0f - (Input.vs_positionWorldAndDepth.z / Input.vs_positionWorldAndDepth.w);
	
	DataToGBuffer(data, outGBuffer0, outGBuffer1, outGBuffer2, outGBuffer3);
}