#include "common.h"

struct 	v2p
{
	float4 tc0: 		TEXCOORD0;
};

void main 
( 
	v2p I,
	out float4 outMotionVector : COLOR0
)
{
	// COORD
	float2 uv = I.tc0;
	int2 pos = uv * STALKER_SCREEN_SIZE.xy;
	//
	
	// G-BUFFER
	float4 gBuffer0 = tex2D(s_position, uv);
		if(gBuffer0.z <= 0 ) gBuffer0.z = dx_Viewport_Params.y;
		if(gBuffer0.w <= 0 ) gBuffer0.w = 1.0f;
	float4 gBuffer1 = tex2D(s_normal, uv);
	float4 gBuffer2 = tex2D(s_diffuse, uv);
	float4 gBuffer3 = tex2D(s_specular, uv);
	//
	
	GBufferData data = DataFromGBuffer(gBuffer0, gBuffer1, gBuffer2, gBuffer3);
	
	// DATA
	float ambientOcclusionBaked =  1.0f /*data.occlusion*/;
				
	float materialID = data.materialID;
	
	float depth = data.depth;
	
	float linearDepth = gBuffer0.z;
		
    float3 positionView = float3(linearDepth * (pos * dx_Pos_Decompression_Params.zw - dx_Pos_Decompression_Params.xy), linearDepth);

	float3 normalView = normalize(data.normal);
	
	float3 albedo = data.diffuseColor;
	float3 specularColor = data.specularColor;
	
	float smoothness = data.smoothness;
	//

	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_bluenoise, uv * (0.5 * STALKER_SCREEN_SIZE.xy) / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
		
	float2 rotation; 
	sincos(blueNoise.x * STALKER_TWO_PI, rotation.x, rotation.y);
	//
	
	float2 velocity = float2(0.5f, 0.5f);
	
	#if defined (STALKER_USE_TAA) || defined (STALKER_USE_MBLUR) || defined (STALKER_USE_STOCHASTIC_SSR) || defined (STALKER_USE_MOTION_VECTOR)
		float4 currentClip	= mul(dx_matrix_Projection, float4(positionView, 1.0f));
		float2 current = (currentClip.xy / currentClip.w);
		current = current * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);

		float4 previousClip 	= mul(dx_matrix_PreviousProjection, float4(positionView, 1.0f));
		float2 previous =  (previousClip.xy / previousClip.w);
		previous = previous * float2(0.5f, -0.5f) + float2(0.5f, 0.5f);

		velocity = (current - previous);
	#endif
	
 	outMotionVector.xy = velocity;
	outMotionVector.z = 0.0f;
	outMotionVector.w = 1.0f;
}