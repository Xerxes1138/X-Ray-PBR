#define USE_AREF

#include "common.h"

uniform sampler2D 		s_blueNoise;
uniform sampler2D		s_sceneColor;

float RayAttenBorder (float2 pos, float value)
{
	float borderDist = min(1.0 - max(pos.x, pos.y), min(pos.x, pos.y));
	return saturate(borderDist > value ? 1.0 : borderDist / value);
}
			
float2 ReflectionCoord(float3 V, float3 H)
{
	float3 reflectionRay = normalize(reflect(V, H));
	float4 reflectionViewProjection = mul(m_VP, reflectionRay);
	float2 reflectionScreenPos = (reflectionViewProjection.xy / reflectionViewProjection.w);
	reflectionScreenPos.y = -reflectionScreenPos.y;
	float2 reflectionScreenUV = 0.5 * reflectionScreenPos + 0.5; // UV Space

	return reflectionScreenUV;
}

float2 RefractionCoord(float3 V, float3 N)
{
	float3 refractionRay = normalize(refract(V, N, 1.0f / 1.33f));
	refractionRay = V + refractionRay * 0.5f;
	
	float4 refractionViewProjection = mul(m_VP, refractionRay);

	float2 refractionScreenPos = refractionViewProjection.xy / refractionViewProjection.w;
	refractionScreenPos.y = -refractionScreenPos.y;
	float2 refractionScreenUV = refractionScreenPos * 0.5 + 0.5;

	return refractionScreenUV;
}

void main 
( 
	VertexOutput_FORWARD Input,
    out float4 outGBuffer0 : COLOR0
)
{
	// COORD
	float2 uv = Input.vs_textureCoord;
	float2 uvScreen = Input.vs_positionScreen.xy / Input.vs_positionScreen.w;
	int2 pos = uvScreen * STALKER_SCREEN_SIZE.xy;
	
	// RANDOM
	float dither =	 Dither8x8Bayer
	(
		fmod(pos.x, 8.0f),
		fmod(pos.y, 8.0f)
	);
	
	float4 blueNoise = tex2D(s_blueNoise, uvScreen * STALKER_SCREEN_SIZE.xy / 1024);
	
	#ifdef STALKER_USE_TAA
		blueNoise.x = fmod(blueNoise.x + (GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.y = fmod(blueNoise.y + (GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.z = fmod(blueNoise.z + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
		blueNoise.w = fmod(blueNoise.w + (GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO + GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
		
	float interleavedGradientNoise = InterleavedGradientNoise(pos);
	
	#ifdef STALKER_USE_TAA
		interleavedGradientNoise = fmod(interleavedGradientNoise + (GOLDEN_RATIO) * (timers.x % 100), 1);
	#endif
	//
	float4 albedo = tex2D(s_base, uv);
	
	float smoothness = lerp(0.7f, 1.0f, 1.0f - albedo.a);
	
	float roughness = max(1.0f - smoothness, 0.0f);
		
	float mip = (1 - smoothness) * STALKER_IBL_NUM_MIP; 

	float2 Xi = blueNoise.xy;
	//Xi.y = lerp(Xi.y, 0.0f, 0.75f); 
	
	float3 normalTangent = tex2D(s_bump, uv);
	normalTangent.y = 1.0f - normalTangent.y;
	normalTangent = normalize(normalTangent * 2.0f - 1.0f);
		
	float3 normalWorld = TangentToWorld(normalize(Input.vs_positionWorld), float4(normalTangent, 1.0f)) ;
	float3 viewDirectionWorld = normalize(Input.vs_positionWorld - eye_position);
	
	float3 reflectWorld = reflect(viewDirectionWorld, normalWorld);
	reflectWorld = RotateAroundYAxis(reflectWorld, dx_SkyRotation.x);
	
	float2 reflectionCoord = ReflectionCoord(viewDirectionWorld, normalWorld);

	// REFLECTION
	float3 specularCube0 = SampleIBL(s_specular_s0, reflectWorld, 0);
	float3 specularCube1 = SampleIBL(s_specular_s1, reflectWorld, 0);

	float3 specularIndirect = L_ambient.rgb * lerp(specularCube0, specularCube1, L_ambient.a);

	float3 reflectionColor = tex2D(s_sceneColor, reflectionCoord);
	
	float reflectionMask = saturate(dot(viewDirectionWorld, reflect(viewDirectionWorld, normalWorld)));
	
	reflectionColor = specularIndirect;//reflectionColor * RayAttenBorder(reflectionCoord, 0.25f) * reflectionMask; //lerp(specularIndirect, reflectionColor, RayAttenBorder(reflectionCoord, 0.25f) * reflectionMask);
	//
		
	float NdotV = saturate(dot(normalWorld, -viewDirectionWorld));

	float3 F = F_LazarovApprox(0.04f, roughness, NdotV);
	
	float2 refractionCoord = RefractionCoord(viewDirectionWorld, normalWorld);

	float3 sceneColor = tex2D(s_sceneColor, uvScreen + normalTangent.xy * 0.1f).rgb;
	
	#if 1
		const int stochasticTaps = 4;
		
		const float2 blueNoiseRand[stochasticTaps] = {blueNoise.xy , blueNoise.zw , float2(-blueNoise.y, blueNoise.x) , float2(-blueNoise.w, blueNoise.z)};
	
		float stochasticSum = 0.0f;
		float4 stochasticBlur = 0.0f;
		for (int k = 0; k < stochasticTaps; k++)
		{
			float dist = sqrt(blueNoiseRand[k].y); // Uniform
			
			if (0)
				dist = pow((blueNoiseRand[k].y - 1), 2.0f); // Bloom
			
			if (1)
				dist = sqrt(-2.0f * log(blueNoiseRand[k].y)); // Gaussian
		
			float sinTheta, cosTheta;
			float theta = blueNoiseRand[k].x * STALKER_TWO_PI;
			sincos(theta, sinTheta, cosTheta);
			float2 rotation = float2(cosTheta, sinTheta);

			float2 offset = rotation * dist * STALKER_SCREEN_SIZE.zw  * 100.0f;
			 
			float weight = 1.0f;
			
			float4 sampledColor = tex2D(s_sceneColor, uvScreen + offset);
			
			sampledColor /= 1.0f + sampledColor;
				
			stochasticBlur += sampledColor * weight;
			stochasticSum += weight;
		}
		stochasticBlur = stochasticBlur / stochasticSum;
		
		stochasticBlur /= 1.0f - stochasticBlur;
	
        sceneColor = (sceneColor + stochasticBlur) * 0.5f;
	#endif
	
	//sceneColor = lerp(sceneColor, reflectionColor, F);
		
	outGBuffer0 = float4(sceneColor /*sceneColor * albedo.rgb*/, albedo.a);
}
